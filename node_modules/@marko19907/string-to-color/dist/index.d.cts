type Algo = (seed: string) => number;
/**
 * The Alea PRNG algorithm, based on a simple multiplicative congruential generator.
 * It is very fast (★★★★★) and has a good balance between simplicity and statistical properties.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Alea: Algo;
/**
 * The Arc4 (Alleged RC4) PRNG algorithm, based on a stream cipher.
 * It is slow (★★☆☆☆) and generates random numbers with good statistical properties but has been considered cryptographically insecure.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Arc4: Algo;
/**
 * The Tychei PRNG algorithm, based on a variant of the Xorshift family.
 * It is fast (★★★★☆) and has good statistical properties.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Tychei: Algo;
/**
 * The Xor128 PRNG algorithm, based on the Xorshift family.
 * It is very fast (★★★★★), simple, and statistically good but has a relatively small state space.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Xor128: Algo;
/**
 * The Xor4096 PRNG algorithm, based on the Xorshift family.
 * It is fast (★★★★☆) and has a larger state space than Xor128, making it more suitable for applications requiring more randomness.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Xor4096: Algo;
/**
 * The Xorshift7 PRNG algorithm, based on the Xorshift family.
 * Somewhat slower than others (★★★☆☆), has good statistical properties, and a larger state space than Xor128.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Xorshift7: Algo;
/**
 * The Xorwow PRNG algorithm, a combination of a linear feedback shift register and Xorshift.
 * It is fast (★★★★☆), simple, and has good statistical properties.
 * @param seed - The input seed string.
 * @returns The next random number in the sequence.
 */
declare const Xorwow: Algo;

type Only<T, U> = {
    [P in keyof T]: T[P];
} & {
    [P in keyof U]?: never;
};
type Either<T, U> = Only<T, U> | Only<U, T>;
type Saturation = Either<{
    /**
     * Short form of the saturation property, range must be between 0 and 100, inclusive.
     */
    s?: number;
}, {
    /**
     * Long form of the saturation property, range must be between 0 and 100, inclusive.
     */
    saturation?: number;
}>;
type Lightness = Either<{
    /**
     * Short form of the lightness property, range must be between 0 and 100, inclusive.
     */
    l?: number;
}, {
    /**
     * Long form of the lightness property, range must be between 0 and 100, inclusive.
     */
    lightness?: number;
}>;
type Alpha = Either<{
    /**
     * Short form of the alpha property, range must be between 0 and 100, inclusive.
     */
    a?: number;
}, {
    /**
     * Long form of the alpha property, range must be between 0 and 100, inclusive.
     */
    alpha?: number;
}>;
/**
 * The options for the color generation.
 * It is possible to use the short form of the options (s, l, a) or the long form (saturation, lightness, alpha),
 * but not both at the same time. If both are present, the full property name takes precedence. Range must be between 0 and 100, inclusive.
 */
type ColorOptions = {
    /**
     * The algorithm to use for the color generation.
     */
    algorithm?: Algo;
} & Saturation & Lightness & Alpha;
declare const defaultColorOptions: ColorOptions;
/**
 * Generates a random color from the given string, saturation and lightness can be controlled.
 * Inspired by https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
 * @param input The input to generate the color from
 * @param options The custom options to use for the color generation
 */
declare function generateColor(input: string, options?: ColorOptions): string;
/**
 * Generates a random color from the given string in the RGB format, same as {@link generateColor} but in the RGB format.
 * @param input The input string to generate the color from
 * @param options The custom options to use for the color generation
 * @returns The generated color in the RGB format
 */
declare function generateColorRGB(input: string, options?: ColorOptions): string;
/**
 * Same as generateColor() but with a different default algorithm that produces a different color.
 * @param input The input to generate the color from
 * @param options The custom options to use for the color generation
 */
declare function generateSecondaryColor(input: string, options?: ColorOptions): string;
/**
 * Same as {@link generateColorRGB} but with a different default algorithm that produces a different color.
 * @param input The input to generate the color from
 * @param options The custom options to use for the color generation
 */
declare function generateSecondaryColorRGB(input: string, options?: ColorOptions): string;
/**
 * Generates a linear gradient from the given input.
 * @param input The input to generate the gradient from
 * @param angle The angle of the gradient
 * @param options The custom options to use for the color generation of the primary color
 * @param secondaryOptions The custom options to use for the color generation of the secondary color
 */
declare function generateGradient(input: string, angle?: number, options?: ColorOptions, secondaryOptions?: ColorOptions): string;

export { Alea, Algo, Arc4, ColorOptions, Tychei, Xor128, Xor4096, Xorshift7, Xorwow, defaultColorOptions, generateColor, generateColorRGB, generateGradient, generateSecondaryColor, generateSecondaryColorRGB };
